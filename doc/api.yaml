#Alessio Borgi's WASAPhoto Project
openapi: 3.0.3

info:
  title: WASAPhoto
  description: |-
    Keep in touch with your friends by sharing photos of special moments, thanks to
    WASAPhoto! Directly from your PC, you can upload your photos, and they will be
    visible to everyone who is following you.
  contact: 
    name: WASAPhoto APIs 
    url: https://github.com/alessioborgi/WASA_Project
    email: borgi.1952442@studenti.uniroma1.it
  version: "1.0.3"

servers:
 - url: http://localhost:3000

tags:
  - name: Login
    description: Methods related to the User Login.
    
  - name: User-Handling
    description: Methods related to the User Handling.
  
  - name: User-Profile
    description: Methods related to the User Profile.
  
  - name: Photo-Uploading
    description: Methods related to the Photo Uploading.
  
  - name: Photo-Comments
    description: Methods related to the Photo's Comments.
  
  - name: Photo-Likes
    description: Methods related to the Photo's Likes.
  
  - name: User-Bans
    description: Methods related to the User's Bans.
  
  - name: User-Following
    description: Methods related to the User's Following Profiles.
  
  - name: User-Followers
    description: Methods related to the User's Followers.
  
  - name: User-Stream
    description: Methods related to the User Homepage/Stream.
    

paths:

  /session: 
    summary: This is the Initial Login part.
    
    #Login Part
    post:
      operationId: doLogin
      tags: ["Login"]
      summary: New User Creation
      description: |
        HOW IT WORKS:
        Given in input the Username(in the Request Body), it will occur the actual user
        registration to the WASAPhoto Platform of the given Username. There can be 
        distinguished two cases though:
        - If the user does not exist, it will be created, and a "unique" user
          identifier is returned (uuid). 
        - If the user exists, the "unique" user identifier is returned (uuid).
        
        RETURN:
        It will then return back in both the two cases above mentioned, the uuid 
        generated iff successful (it can be concepted as a sort of secret id).
        
        RESTRICTIONS:
        Note that this action is allowed ALWAYS, without any restriction and any need
        to pass for uuid parameter, since it is the place where it is actually created
        a new username(profile) or logged-in a present username. 
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/username"}
        required: true

      responses:
        '200':
          description: Ok! User LogIn Successful!
          content:
            application/json:
              schema: {$ref : "#/components/schemas/uuid"}

        '201':
          description: Created! New User Created Successfully!
          content:
            application/json:
              schema: {$ref : "#/components/schemas/uuid"}

        '403': {$ref : '#/components/responses/UnAuthorized'}
          
        '404': {$ref : '#/components/responses/NotFound'}

        '500': {$ref : '#/components/responses/InternalServerError'}
  
  ### USER LOGIN PART: #
  /users:
    summary: Users Collection

    get:
      security:
        - bearerAuthentication: []
      operationId: getUsers
      tags: ["User-Handling"]
      summary: WASAPhoto's List of Users.
      description: |
        HOW IT WORKS:
        Return the list of the Users registered to WASAPhoto.
        
        RETURN:
        The returned value is an array of Usernames. 
        
        RESTRICTIONS:
        Note that this action is allowed to EVERY USER that is logged in. Notice that we 
        require here for authentication because of the fact that you should be first 
        registered/logged-in in order to obtain the whole list of users. This list should
        be filtered by returning all the users that are registered in WASAPhoto that you
        are allowed to see (i.e., all except for the ones that have banned the user that is
        requesting this list).

      responses:
        "200":
          description: Ok! List of registered Users Returned Successfully!.
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 1000000
                items: 
                  $ref: "#/components/schemas/username"

        "204": {$ref : '#/components/responses/NoContent'}
        
        '403': {$ref : '#/components/responses/UnAuthorized'}
        
        '404': {$ref : '#/components/responses/NotFound'}

        '500': {$ref : '#/components/responses/InternalServerError'}


  /users/{fixedUsername}:
    summary: Specific fixedUsername Profile of the User Collection.
    parameters: 
      #I need to provide for a fixedUsername of the person I am looking for.
      - $ref : "#/components/parameters/fixedUsername"

    put:
      security:
        - bearerAuthentication: []
      operationId: setMyUsername
      tags: ["User-Handling"]
      summary: Change your Username.
      description: |
        HOW IT WORKS:
        Change the (variable) Username with the new value passed in input (newUsername). 
        Also here, we request for authentication of the user that wants to perform this action.
        
        RETURN:
        Return the fixedUsername of the User in case of the change is successful.
        
        RESTRICTIONS:
        Note that this action is allowed to NOT EVERY USER. Indeed, this means that the 
        change of Username can be done by ONLY the user that is the Profile Owner. 
        Otherwise, it cannot. 
      parameters: 
        - name: newUsername
          in: query
          required: true
          description: New Username for which we want to change our username with. 
          schema:
            $ref: "#/components/schemas/username"

      responses:
        "200":
          description: OK! Username Updated Successfully!.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/fixedUsername" }
        
        '403': {$ref : '#/components/responses/UnAuthorized'}

        '500': {$ref : '#/components/responses/InternalServerError'}
    
    delete:
      security:
        - bearerAuthentication: []
      operationId: deleteUsername
      tags: ["User-Handling"]
      summary: Delete your Username.
      description: |
        HOW IT WORKS:
        Remove the User profile, given in input the username. Also here, we request for 
        authentication of the user that wants to perform this action. 
        
        RETURN:
        Return the fixedUsername in response, in case of successful deletion.
        
        RESTRICTIONS:
        Note that this action is allowed to NOT EVERY USER. Indeed, this means that the 
        deletion of the user(account) can be done by ONLY if the user that is deleting the
        account is the actual ORIGINAL ACCOUNT OWNER. Otherwise, it cannot. 
        This means that the uuid that is given by the Bearer Authentication requested, should 
        be the uuid of the username that is given necessarily, in order to perform the action.
        
      responses:
        "200": 
          description: OK! Username deleted successfully! 
          content:
            application/json:
              schema: { $ref: "#/components/schemas/fixedUsername" }
        
        '403': {$ref : '#/components/responses/UnAuthorized'}

        '500': {$ref : '#/components/responses/InternalServerError'}
    
    get:
      security:
        - bearerAuthentication: []
      operationId: getUserProfile
      tags: ["User-Profile"]
      summary: Return the User Profile.
      description: |
        HOW IT WORKS:
        Return the current User Profile given in input the Username. Also here, we request for 
        authentication of the user that wants to perform this action. 
        
        RETURN:
        The returned value is the requested User's profile object. 
        
        RESTRICTIONS:
        Note that this action is allowed NOT to EVERY USER. Indeed, you can retrieve the user
        profile iif this has not banned you.
      responses:
        "200":
          description: Ok! User Profile Returned Successfully!.
          content:
            application/json:
              schema:
                items: 
                  $ref: "#/components/schemas/userProfile"

        "204": {$ref : '#/components/responses/NoContent'}
        
        '403': {$ref : '#/components/responses/UnAuthorized'}
        
        '404': {$ref : '#/components/responses/NotFound'}

        '500': {$ref : '#/components/responses/InternalServerError'}

  ### REMARK #

  #Notice that I decided to implement the project going also through subfolders. Notice that
  #I could have opted for a 'better' version, suggested by Microsoft's Best Practices, for
  #which we have that a long path should be splitted into smaller parts in order to be
  #easier to mantain and more flexible. This is the resource:
  #(https://learn.microsoft.com/en-us/azure/architecture/.#best-practicesapi-design
  
  #However, I have decided to go for the more straightforward way. 

  ### PHOTO PUBLICATION #
  /users/{fixedUsername}/photos:
    summary: User's Photos Collection.
    parameters: 
      #I need to provide for a username.
      - $ref : "#/components/parameters/fixedUsername"

    #Adding a new Photo.
    post:
      security:
        - bearerAuthentication: []
      operationId: uploadPhoto
      tags: ["Photo-Uploading"]
      summary: Posting a new Photo.
      description: |
        HOW IT WORKS:
        Given in input the Username of the person I want to add the photo, post a new photo on
        this profile. Also here, we request for  authentication of the user that wants to perform
        this action. 
        Note that this action correspond as making a post on Instagram. However, I opted for the
        nomenclature photos, in such a way of avoiding to confuse the Post on instagram with the
        post HTTP method.
        
        RETURN:
        It will then return back in output the photoid iff successful.
        
        RESTRICTIONS:
        Note that this action is allowed to ONLY the USERS that are both the Maker of the
        Post on the profile and the owner of the User Profile. Thus, we can only post photos on
        our own profiles.
      
      requestBody:
        content:
          multipart/form-data:
            schema: {$ref: "#/components/schemas/photo"}

      responses:
        "201":
          description: Created! Photo Posted Successfully!
          content:
            application/json:
              schema: { $ref: '#/components/schemas/photoid' }
        
        '403': {$ref : '#/components/responses/UnAuthorized'}

        '500': {$ref : '#/components/responses/InternalServerError'}
    
    #Getting my set of photos publicated
    get:
      security:
        - bearerAuthentication: []
      operationId: getPhotos
      tags: ["Photo-Uploading"]
      summary: Get my Photos that has been publicated.
      description: |
        HOW IT WORKS:
        Return the list of the photos objects of the profile. The list should be sorted
        w.r.t. the reverse chronological order. Also here, we request for authentication 
        of the user that wants to perform this action. 
        
        RETURN:
        The returned value is an array of photo objects.
        
        RESTRICTIONS:
        Note that this action is allowed to EVERY USER, EXCEPT for the BANNED ONES. This 
        means that the revision of photos action can be done by any user(thus both on 
        its photos and on other photos), except for the case where the user that wants 
        to revise photos, has been banned by the owner of the photo.
      responses:
        "200":
          description: List of Photos Returned.
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 100000
                items: { $ref: "#/components/schemas/photo" }
        
        '403': {$ref : '#/components/responses/UnAuthorized'}
        
        '404': {$ref : '#/components/responses/NotFound'}

        '500': {$ref : '#/components/responses/InternalServerError'}
    
  #Particular Photo
  /users/{fixedUsername}/photos/{photoid}:
    summary: Specific User Profile's photo.
    parameters:
    - $ref: "#/components/parameters/fixedUsername"
    - $ref: "#/components/parameters/photoid"

    #To Modify the Photo's Location or the Photo's Phrase.
    put:
      security:
        - bearerAuthentication: []
      operationId: setPhoto
      tags: ["Photo-Uploading"]
      summary: Change a Photo content.
      description: | 
        HOW IT WORKS:
        Change a user's photo content, given a specific username that should the photo owner 
        and given a specific photoid, that is the Id of the photo of which we want to change 
        the content. Note that the only two things that can be changed are the location and 
        the phrase. Also here, we request for authentication of the user that wants to perform
        this action. 
        
        RETURN:
        Return the photoid iff the photo's content change is successful.
        
        RESTRICTIONS:
        Note that this action is allowed to NOT EVERY USER. Indeed, this means that the 
        change of photo can be done by ONLY if the user that is changing the photo is the 
        actual ORIGINAL ACCOUNT OWNER. Otherwise, it cannot. This means that, the uuid 
        provided by the authentication, should be the unique user identifier of the username 
        given in input.
      
      parameters:
        - name: newLocation
          in: query
          required: false
          description: New Photo's Location. 
          schema:
            $ref: "#/components/schemas/location"
        
        - name: newPhrase
          in: query
          required: false
          description: New Photo's Phrase. 
          schema:
            $ref: "#/components/schemas/phrase"
        
      responses:
        "200": 
           description: An existing Photo has been substituted.
           content:
            application/json:
              schema: { $ref: "#/components/schemas/photoid" }
        
        '403': {$ref : '#/components/responses/UnAuthorized'}

        '500': {$ref : '#/components/responses/InternalServerError'}


    #Deleting one particular photo that I got publicated.
    delete:
      security:
        - bearerAuthentication: []
      operationId: deletePhoto
      tags: ["Photo-Uploading"]
      summary: Remove your (existing) photo.
      description: |
        HOW IT WORKS:
        Remove a photo from the account given the username of the photo owner, the uuid of 
        the person who is trying to remove the photo and the photoID, i.e. the photo id. 
        Note that the removal of an image will also remove likes and comments related to it.
        
        RETURN:
        Return the photoid iff the successful deletion.
        
        RESTRICTIONS:
        Note that this action is allowed to NOT EVERY USER. Indeed, this means that the 
        deletion of the photo can be done by ONLY if the user that is deleting the photo
        is the actual ORIGINAL PHOTO ADDER. Otherwise, it cannot. Thus, only the user that
        has actually posted the photo can delete it. 
      responses:
        "200": 
          description: OK! Photo deleted successfully!
          content:
            application/json:
              schema: { $ref: "#/components/schemas/photoid" }
        
        '403': {$ref : '#/components/responses/UnAuthorized'}

        '404': {$ref : '#/components/responses/NotFound'}

        '500': {$ref : '#/components/responses/InternalServerError'}



  ### PHOTO COMMENTS #

  #Comments Set.
  /users/{fixedUsername}/photos/{photoid}/comments:
    summary: Photo's Comments Collection.
    parameters: 
      #I need to provide for a Photo's Owner and a Photo's photoid.
      - $ref : "#/components/parameters/fixedUsername"
      - $ref : "#/components/parameters/photoid"

    #Adding a new Comment.
    post:
      security:
        - bearerAuthentication: []
      operationId: commentPhoto
      tags: ["Photo-Comments"]
      summary: Posting a new Photo's Comment.
      description: |-
        HOW IT WORKS:
        Given in input the Username owner of the photo on which we want to add the 
        comment and the Photo's photoid, to indicate on which photo to add the comment, 
        it will post a new photo's comment. 
        
        RETURN:
        It will then return back in output the Commentid iff successful.
        
        RESTRICTIONS:
        Note that this action is allowed to EVERY USER, EXCEPT for the BANNED ONES. This 
        means that the comment action can be done by any user(thus both on its photos 
        and on other photos), except for the case where the user that wants to comment,
        has been banned by the owner of the photo.
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/comment"}

      responses:
        "201":
          description: Created! Photo's Comment Posted Successfully!
          content:
            application/json:
              schema: { $ref: '#/components/schemas/commentid' }
        
        '403': {$ref : '#/components/responses/UnAuthorized'}

        '500': {$ref : '#/components/responses/InternalServerError'}
    
    #Getting Photo's Comment.
    get:
      security:
        - bearerAuthentication: []
      operationId: getPhotoComments
      tags: ["Photo-Comments"]
      summary: Get the Photos's Comments.
      description: |-
        HOW IT WORKS:
        Return the list of the Photo's Comments on reverse chronological order. Also here, 
        we request for authentication of the user that wants to perform this action. 
        
        RETURN: 
        The returned value is an array of Comment Objects. 
        
        RESTRICTIONS:
        Note that this action is allowed to EVERY USER, EXCEPT for the BANNED ONES. This 
        means that the retrieval of photo's comments can be done by any user(thus both 
        on its photos and on other photos), except for the case where the user that
        wants to retrieve the photo's comments has been banned by the owner of the photo.
        (Indeed, in this case, it should not be able to neither see its profile!)
      responses:
        "200":
          description: Ok! List of Photos' Comments Returned.
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 100000
                items: { $ref: "#/components/schemas/comment" }
        
        '403': {$ref : '#/components/responses/UnAuthorized'}
        
        '404': {$ref : '#/components/responses/NotFound'}

        '500': {$ref : '#/components/responses/InternalServerError'}
  
  
  #Particular Comment.
  /users/{fixedUsername}/photos/{photoid}/comments/{commentid}:
    summary: Specific Photo's Comment.
    parameters:
    - $ref: "#/components/parameters/fixedUsername"
    - $ref: "#/components/parameters/photoid"
    - $ref: "#/components/parameters/commentid"

    #To Sobstitute a Photo's Comment.
    put:
      security:
        - bearerAuthentication: []
      operationId: setComment
      tags: ["Photo-Comments"]
      summary: Change the Photo's Comment.
      description: | 
        HOW IT WORKS:
        Change a photo's comment given a specific fixedUsername that is the owner of the photo 
        to which the comment has been added, given the photoid that indicates the photo on 
        which the comment has been added, and given a specific commentid.
        Note that as additional parameter, we ask, in a mandatorial way, for a new phrase 
        that will sobstitute the one present for the comment. Also here, we request for 
        authentication of the user that wants to perform this action. 
        
        RETURN:
        Return the commentid iff the comment change is successful.
        
        RESTRICTIONS:
        Note that this action is allowed to NOT EVERY USER. Indeed, this means that the 
        change of comment can be done by ONLY if the user that is changing the comment
        is the actual ORIGINAL COMMENTER. Otherwise, it cannot.
        
      parameters:
      - name: modifiedPhrase
        in: query
        required: true
        description: Modified Comment's Phrase. 
        schema:
          $ref: '#/components/schemas/phrase'
        
      responses:
        "200": 
           description: OK! An existing Photo's Comment has been modified.
           content:
            application/json:
              schema: { $ref: '#/components/schemas/commentid' }

        '403': {$ref : '#/components/responses/UnAuthorized'}

        '500': {$ref : '#/components/responses/InternalServerError'}
       

    #Deleting one particular photo's comment that I got publicated.
    delete:
      security:
        - bearerAuthentication: []
      operationId: uncommentPhoto
      tags: ["Photo-Comments"]
      summary: Remove a Photo's comment.
      description: |
        HOW IT WORKS:
        Remove a photo's comment given a specific username that is the owner of the photo to
        which the comment has been added, given the uphoto id that indicates the photo on which
        the comment has been added, and given a specific commentid. 
        
        RETURN:
        Return the comment commentid iff the comment has been deleted successfully.
        
        RESTRICTIONS:
        Note that this action is allowed to NOT EVERY USER. Indeed, this means that the 
        deletion of the comment can be done ONLY if the user that is deleting the comment
        is the actual ORIGINAL COMMENTER. Otherwise, it cannot.
      responses:
        "200": 
          description: OK! Photo's Comment deleted successfully!
          content:
            application/json:
              schema: { $ref: "#/components/schemas/commentid" }

        '403': {$ref : '#/components/responses/UnAuthorized'}

        '404': {$ref : '#/components/responses/NotFound'}

        '500': {$ref : '#/components/responses/InternalServerError'}

  ### PHOTO LIKES #

  #Likes Set.
  /users/{fixedUsername}/photos/{photoid}/likes:
    summary: Photo's Likes Collection.
    parameters: 
      #I need to provide for a Photo's owner fixedUsername, a photo's photoid.
      - $ref : "#/components/parameters/fixedUsername"
      - $ref : "#/components/parameters/photoid"

    #Getting Photo's Likes.
    get:
      security:
        - bearerAuthentication: []
      operationId: getPhotoLikes
      tags: ["Photo-Likes"]
      summary: Get the Photos's Likes.
      description: |-
        HOW IT WORKS:
        Given in input the fixedUsername of the person which owns the photo and the Photo's
        photoid, it will return the list of the Photos'Likes on reverse chronological order. 
        Also here, we request for authentication of the user that wants to perform this action. 
        
        RETURN:
        The returned value is an array of Like Objects. 
        
        RESTRICTIONS:
        Note that this action is allowed to EVERY USER, EXCEPT for the BANNED ONES. This 
        means that the retrieval of photo's likes can be done by any user(thus both 
        on its photos and on other photos), except for the case where the user that
        wants to retrieve the photo's likes has been banned by the owner of the photo.
        (Indeed, in this case, it shoudl not be able to neither see its profile!)
      responses:
        "200":
          description: Ok! List of Photos' Likes Returned.
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 100000
                items: { $ref: "#/components/schemas/like" }

        '403': {$ref : '#/components/responses/UnAuthorized'}
        
        '404': {$ref : '#/components/responses/NotFound'}

        '500': {$ref : '#/components/responses/InternalServerError'}
  
  
  
  /users/{fixedUsername}/photos/{photoid}/likes/{usernameliker}:
    summary: Photo's Particular Like.
    parameters: 
      #I need to provide for a Photo's owner username, a Liker's uuid and a photo's photoid.
      - $ref : "#/components/parameters/fixedUsername"
      - $ref : "#/components/parameters/photoid"
      - $ref : "#/components/parameters/usernameliker"

    #Adding a new Like.
    put:
      security:
        - bearerAuthentication: []
      operationId: likePhoto
      tags: ["Photo-Likes"]
      summary: Posting a new Photo's Like.
      description: |-
        HOW IT WORKS:
        Given in input the Liker's username, the Photo's photoid, it will post a new
        photo's like to the photo of the fixedUsername passed in input. 
        Notice that, given the fact that we can add only one like per person at each photo, 
        we directly add it with the put and not with the post. The specific likeid (that
        I decided to call usernameliker), then will simply coincide with the username of 
        the username that has added the like to the photo. 
        Also here, we request for authentication of the user that wants to perform this action. 
        
        RETURN:
        It will then return back in output the usernameliker iff successful (i.e. the  
        username of the uuid that has added the like to the photo).
        
        RESTRICTIONS:
        Note that this action is allowed to EVERY USER, EXCEPT for the BANNED ONES and 
        the PHOTO OWNER (since there is no sense of putting a self-like on a photo). 
        This means that the like action can be done by any user except for the case where  
        the user that wants to put a like, has been banned by the owner of the photo, and 
        when the liker is the owner of the photo. 
        
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/like"}

      responses:
        "201":
          description: Created! Photo's Like Added Successfully!
          content:
            application/json:
              schema: { $ref: '#/components/schemas/fixedUsername'}
        
        '403': {$ref : '#/components/responses/UnAuthorized'}

        '500': {$ref : '#/components/responses/InternalServerError'}
    
    
    #Deleting one particular photo's like that I have put.
    delete:
      security:
        - bearerAuthentication: []
      operationId: unlikePhoto
      tags: ["Photo-Likes"]
      summary: Remove a Photo's Like.
      description: |
        HOW IT WORKS:
        Given in input the username of the photo owner that we want to unlike, the Liker's 
        username and the Photo's photoid, it will remove a like from this photo. 
        Notice that, given the fact that we can add only one like per person at each photo, 
        we directly recognize as the Liker by the likeID(usernameliker). 
        
        RETURN:
        Return the usernameliker, i.e. the fixedUsername of the Liker, iff the like has been 
        deleted successfully.
        
        RESTRICTIONS:
        Note that this action is allowed to NOT EVERY USER. Indeed, this means that the 
        deletion of the like can be done by ONLY if the user that is deleting the like
        is the actual original liker. Otherwise, it cannot.
      responses:
        "200": 
          description: OK! Photo's Like deleted successfully!
          content:
            application/json:
              schema: { $ref: "#/components/schemas/fixedUsername" }
        
        '403': {$ref : '#/components/responses/UnAuthorized'}

        '404': {$ref : '#/components/responses/NotFound'}

        '500': {$ref : '#/components/responses/InternalServerError'}

  
  ### BANS PUBLICATION #

  #Bans Set:
  /users/{fixedUsername}/bans:
    summary: Username's Banned Users Collection.
    parameters: 
      #I need to provide for a uuid.
      - $ref : "#/components/parameters/fixedUsername"

    #Getting the set of Banned Users.
    get:
      security:
        - bearerAuthentication: []
      operationId: getBannedUsers
      tags: ["User-Bans"]
      summary: Get Bans for the given user.
      description: |
        HOW IT WORKS:
        Return the list of the Bans given the fixedUsername of the person we want to know the
        list of banned user. The list should be sorted w.r.t. the reverse chronological order.
        Also here, we request for authentication of the user that wants to perform this action. 
        
        RETURN:
        The returned value is an array of Ban objects.
        
        RESTRICTIONS:
        Note that this action is allowed to ONLY the USER OWNER of the PROFILE. This 
        means that the revision of banned users, can be done by only the owner of the 
        profile.
      responses:
        "200":
          description: List of Banned Users.
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 100000
                items: { $ref: "#/components/schemas/ban" }
        
        '403': {$ref : '#/components/responses/UnAuthorized'}
        
        '404': {$ref : '#/components/responses/NotFound'}

        '500': {$ref : '#/components/responses/InternalServerError'}
    
  #Particular Ban
  /users/{fixedUsername}/bans/{banid}:
    summary: Specific User's Ban.
    parameters:
    - $ref: "#/components/parameters/fixedUsername"
    - $ref: "#/components/parameters/banid"

    #Adding a new Ban.
    put:
      security:
        - bearerAuthentication: []
      operationId: banUser
      tags: ["User-Bans"]
      summary: Banning a User.
      description: |
        HOW IT WORKS:
        Given in input the Banner username, and a ban Id of the username we want to ban, ban
        it. Also here, we request for authentication of the user that wants to perform this
        action. 
        
        RETURN:
        It will then return back in output the banid(that corresponds to the username of the 
        banned user) iff successful.
        
        RESTRICTIONS:
        Note that this action is allowed to ONLY the USERS that are both the Creators of the
        Ban and the Owner of the User Profile. Thus, we can only Ban people if we are the 
        account owners. 
      
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/ban"}

      responses:
        "201":
          description: Created! User Ban Added Successfully!
          content:
            application/json:
              schema: { $ref: '#/components/schemas/username' }
        
        '403': {$ref : '#/components/responses/UnAuthorized'}

        '500': {$ref : '#/components/responses/InternalServerError'}
        
    #Deleting one particular ban that I added.
    delete:
      security:
        - bearerAuthentication: []
      operationId: unbanUser
      tags: ["User-Bans"]
      summary: Remove a User Ban.
      description: |
        HOW IT WORKS:
        Remove a ban from the account given the username of the account, and the username
        (banID) of the person I want to unban.  Also here, we request for authentication of 
        the user that wants to perform this action. 
        
        RETURN:
        Return the banID(username of unbanned user) iff the successful deletion.
        
        RESTRICTIONS:
        Note that this action is allowed to NOT EVERY USER. Indeed, this means that the 
        deletion of the ban can be done ONLY if the user that is deleting the ban
        is the actual ORIGINAL BAN ADDER. Otherwise, it cannot. Thus, only the user that
        has actually banned a user, can also delete the ban, whenever it wants. 
      responses:
        "200": 
          description: OK! User Ban deleted successfully!
          content:
            application/json:
              schema: { $ref: "#/components/schemas/username" }
        
        '403': {$ref : '#/components/responses/UnAuthorized'}

        '404': {$ref : '#/components/responses/NotFound'}

        '500': {$ref : '#/components/responses/InternalServerError'}


  ### FOLLOWERS PUBLICATION #

  #Followers set: (Set of people that are following this account)
  /users/{fixedUsername}/followers:
    summary: Username's Followers Collection (people who are following me).
    parameters: 
      #I need to provide for a fixedUsername for the person I want to know the followers.
      - $ref : "#/components/parameters/fixedUsername"

    #Getting the set of Followers.
    get:
      security:
        - bearerAuthentication: []
      operationId: getFollowers
      tags: ["User-Followers"]
      summary: Get the Followers.
      description: |
        HOW IT WORKS:
        Return the list of the Followers of a given fixedUsername, given also the uuid of the 
        person that is requesting the action. The list should be sorted w.r.t. the reverse
        chronological order.  
        
        RETURN:
        The returned value is an array of follow objects.
        
        RESTRICTIONS:
        Note that this action is allowed not to EVERY USER. Indeed, we can all see the 
        followers of anyone, provided that we are not banned by them.
      responses:
        "200":
          description: List of Followers Object.
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 100000
                items: { $ref: "#/components/schemas/follow" }
        
        '403': {$ref : '#/components/responses/UnAuthorized'}
        
        '404': {$ref : '#/components/responses/NotFound'}

        '500': {$ref : '#/components/responses/InternalServerError'}


  /users/{fixedUsername}/following:
    summary: Username's Following Collection (people I am following).
    parameters: 
      #I need to provide for a username of the account owner, a uuid of the person for which I
      #want to add followers.
      - $ref : "#/components/parameters/fixedUsername"

    #Getting the set of Followed People.
    get:
      security:
        - bearerAuthentication: []
      operationId: getFollowing
      tags: ["User-Following"]
      summary: Get the Following.
      description: |
        HOW IT WORKS:
        Return the list of the Following Users, given a username of the person I want to 
        know the Following Users. The list should be sorted w.r.t. the reverse chronological
        order. Also here, we request for authentication of the user that wants to perform this
        action. 
        
        RETURN:
        The returned value is an array of Follow objects.
        
        RESTRICTIONS:
        Note that this action is allowed not to EVERY USER. Indeed, we can all see the 
        following Users of anyone, provided that we are not banned by them.
      responses:
        "200":
          description: List of Following Object.
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 100000
                items: { $ref: "#/components/schemas/follow" }
        
        '403': {$ref : '#/components/responses/UnAuthorized'}
        
        '404': {$ref : '#/components/responses/NotFound'}

        '500': {$ref : '#/components/responses/InternalServerError'}
    

    
  /users/{fixedUsername}/followers/{followerid}:
    summary: Specific User's Ban.
    #I need to provide for the fixedUsername, and followID(username).
    parameters:
    - $ref: "#/components/parameters/fixedUsername"
    - $ref: "#/components/parameters/followerid"
    
    #Adding a new Follow.
    put:
      security:
        - bearerAuthentication: []
      operationId: followUser
      tags: ["User-Following"]
      summary: Follow a User.
      description: |
        HOW IT WORKS:
        Given in input the fixedUsername that is the account owner, and the follow object passed
        in the request body, add this last one on the collection of following users.
        Also here, we request for authentication of the user that wants to perform this action. 
        
        RETURN:
        It will then return back in output the followid(username of the account started to be
        followed) iff successful.
        
        RESTRICTIONS:
        Note that this action is allowed to ONLY users that are of course authenticated, meaning 
        that the actual uuid must be the uuid of the username passed in input. Moreover, in the 
        Request Body, obviously, we cannot pass a username that is equal to the username in the 
        path, since I cannot follow my own profile (or better, it does not make any sense).
      
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/follow"}

      responses:
        "201":
          description: Created! User Started to Follow Successfully!
          content:
            application/json:
              schema: { $ref: '#/components/schemas/username' }
        
        '403': {$ref : '#/components/responses/UnAuthorized'}

        '500': {$ref : '#/components/responses/InternalServerError'}

    #Deleting one particular follow that I have added.
    delete:
      security:
        - bearerAuthentication: []
      operationId: unfollowUser
      tags: ["User-Following"]
      summary: Remove a User Follow.
      description: |
        HOW IT WORKS:
        Remove a follow from the account fixedUsername given the followid(i.e. the username of
        the person that I was following). 
        
        RETURN:
        Return the followid(username of the person I was following) iff successful deletion.
        
        RESTRICTIONS:
        Note that this action is allowed to NOT EVERY USER. Indeed, this means that the 
        deletion of the follow can be done ONLY if the user that is deleting the follow
        is the actual ORIGINAL FOLLOW ADDER. Otherwise, it cannot. Thus, only the user that
        has actually followed a user, can also delete it, whenever it wants. This means that 
        the user that performs this action should be on its own profile.
      responses:
        "200": 
          description: OK! User Follow deleted successfully!
          content:
            application/json:
              schema: { $ref: "#/components/schemas/username" }
        
        '403': {$ref : '#/components/responses/UnAuthorized'}

        '404': {$ref : '#/components/responses/NotFound'}

        '500': {$ref : '#/components/responses/InternalServerError'}


  /users/{fixedUsername}/myStream:
    summary: Username's Stream (initial home of Instagram where there are last posts).
    parameters: 
      #I need to provide for a username of the person for which I want to know the stream.
      - $ref : '#/components/parameters/fixedUsername'

    #Getting the stream of an account.
    get:
      security:
        - bearerAuthentication: []
      operationId: getMyStream
      tags: ["User-Stream"]
      summary: Get the Stream.
      description: |
        HOW IT WORKS:
        Return the list of the last posts belonging to the following people, given in input
        the username of the person I want to know this information. The list returned is in
        reverse chronological order, of course. 
        Also here, we request for authentication of the user that wants to perform this action. 
        
        RETURN:
        The returned value is an array of Photo objects.
        
        RESTRICTIONS:
        Note that this action is allowed NOT to EVERY USER. Indeed, this is only allowed to
        the owner of the profile, meaning that, only if username and the username of the uuid
        that is requesting this action coincide.
      responses:
        "200":
          description: List of Photo Objectof people I am following.
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 100000
                items: { $ref: "#/components/schemas/photo" }
        
        '403': {$ref : '#/components/responses/UnAuthorized'}
        
        '404': {$ref : '#/components/responses/NotFound'}

        '500': {$ref : '#/components/responses/InternalServerError'}







################################### COMPONENTS ###################################








components:

  ##### SCHEMAS ##
  schemas:

    ### SCHEMAS FOR /USER #
    uuid:
      title: uuid
      type: string
      description:  |-
        The uuid is the unique identifier that every user will have. It will be STATIC
        and NOT-PUBLICLY-VISIBLE, used only as sort of token during bearer authenticaiton,
        thus passed always in header when it is a parameter.
        Here I will make use of an Universally Unique Identifier (UUID), i.e. a large 
        number that is almost guaranteed to be unique, probabilistically speaking. 
        It is rendered using a well-known Regex, a string of hexadecimal characters 
        separated by hyphens, in the format 8-4-4-4-12. (Also adopted bu the Google's uuid).
      pattern: '^[0-9a-fA-F\-]{36}'
      format: uuid
      minLength: 36
      maxLength: 36
      example: 25f9f605-7cbb-4f02-9569-1d120e0580f7
      
    fixedUsername:
      title: fixedUsername
      type: string
      description:  |-
        The fixedUsername is a STATIC and PUBLICLY-AVAILABLE username, that will however 
        remain constants during the whole course of the user creation. It CANNOT BE CHANGED
        (as the uuid) and I use it since it helps me to change the username of the user 
        (username) still pointing to this particular user.
        I use as pattern a Regex of simply 10 letters (both capital and not).
      pattern: '^[a-zA-Z]{10}$'
      minLength: 10
      maxLength: 10
      example: abBHhjsHGF
      
      
    username: 
      title: username
      type: string
      description: |-
        The Username is the DYNAMIC and PUBLICLY-AVAILABLE username, that can be reset by the 
        user.
      minLength: 1
      maxLength: 31
      pattern: ^.*$
      example: Maria
    
    name:
      title: name
      type: string
      description: It is the User actual name.
      minLength: 1
      maxLength: 31
      default: "Not Inserted"
      pattern: ^.*$
      example: Alessio
    
    surname:
      title: surname
      type: string
      description: It is the User actual surname.
      minLength: 1
      maxLength: 31
      default: "Not Inserted"
      pattern: ^.*$
      example: Borgi
    
    dateOfBirth:
      title: dateOfBirth
      type: string
      description: Actual Date when the user was born.
      format: date
      default: "0000-01-01"
      example: "2001-04-17"

    email:
      title: email
      type: string
      description:  It is the User Email.
      format: email
      default: "nome.matriculation@studenti.uniroma1.it"
      example: borgi.1952442@studenti.uniroma1.it
    
    nationality:
      title: nationality
      type: string
      description:  It is the User Nationality.
      default: "Not Inserted"
      pattern: ^.*$
      example: Italian
    
    gender:
      title: gender
      type: string
      description: User Gender.
      enum:
      - male
      - female 
      - do not specify
      default: do not specify
      pattern: ^.*$
      example: male

    personalInfo:
      title: personalInfo
      type: object
      description: |
        This is the personalInfo object. This groups the set of personal information 
        we request the User to insert(all of them are not required). 
      properties: 
        name:
          $ref: "#/components/schemas/name"
        surname:
          $ref: "#/components/schemas/surname"
        dateOfBirth:
          $ref: "#/components/schemas/dateOfBirth"
        email:
          $ref: "#/components/schemas/email"
        nationality:
          $ref: '#/components/schemas/nationality'
        gender:
          $ref: "#/components/schemas/gender"


    dateOfCreation:
      title: dateOfCreation
      type: string
      description: Actual Date Profile Creation.
      format: date
      default: "0000-01-01"
      example: "2021-04-17"
    
    numberPhotos:
      title: numberPhotos
      type: integer
      description: Current number of Photos(Posts).
      default: 0
      example: 120

    totNumberLikes:
      title: totNumberLikes
      type: integer
      description: Current total number of likes.
      default: 0
      example: 1800
    
    totNumberComments:
      title: totNumberComments
      type: integer
      description: Current total number of comments.
      default: 0
      example: 70
    
    numberFollowers:
      title: numberFollowers
      type: integer
      description: Current number of Followers.
      default: 0
      example: 360

    numberFollowing:
      title: numberFollowing
      type: integer
      description: Current number of Following.
      default: 0
      example: 210
    
    arrayPhotos:
      title: arrayPhotos
      type: array
      items: 
        $ref: "#/components/schemas/photo" 
      description: Array of Photos(Posts).
      minItems: 0
      maxItems: 100000
      default: []

    
    #User Profile Including (uuid, username, (name, surname, personalInfo), 
    #                        dateOfCreation, numberPhotos, totNumberLikes,      
    #                        totNumberComments, numberFollowers, numberFollowing,
    #                        arrayPhotos).
    userProfile:
      title: user
      type: object
      description: |
        This is the entire User object. I have built the project on the fact that we can
        have also the possibility to have also more username per person (e.g. as 
        Instagram). It is therefore allowed that one person have more than one username
        and therefore more profiles. It would only need to re-insert all the personalInfo
        (if he/she wants), (i.e. uuid, username, personalInfo, dateOfCreation, numberPhotos,
        totNumberLikes, totNumberComments, numberFollowers, numberFollowing, arrayPhotos). 
        Thus, I treat every username as a new profile, indistinctly to whom belongs to.  
      properties: 
        uuid: 
          $ref: "#/components/schemas/uuid"
        username: 
          $ref: "#/components/schemas/username"
        personalInfo:
          $ref: "#/components/schemas/personalInfo"
        dateOfCreation:
          $ref: "#/components/schemas/dateOfCreation"
        numberPhotos:
          $ref: "#/components/schemas/numberPhotos"
        totNumberLikes:
          $ref: "#/components/schemas/totNumberLikes"
        numberComments:
          $ref: "#/components/schemas/totNumberComments"
        numberFollowers:
          $ref: "#/components/schemas/numberFollowers"
        numberFollowing:
          $ref: "#/components/schemas/numberFollowing"  
        arrayPhotos:
          $ref: "#/components/schemas/arrayPhotos" 


    ### SCHEMAS FOR ../PHOTO #
    #Whole Photo Object   
    photoid:
      title: photoid
      type: integer
      description: ID of the Photo to be/that is posted.
      readOnly: true
      example: 1
    
    fileName:
      title: filename
      type: string
      description: |-
        Actual Photo to be uploaded. 
      format: binary
      example: photoWASA.png
    
    uploadDate:
      title: uploadDate
      type: string
      description: |-
        Actual Date and Time of the moment when the photo is uploaded/commented/liked.
      format: date-time
      default: "0000-01-01T00:00:00Z"
      example: "2022-11-03T08:30:00Z"

    latitude:
      title: latitude
      type: number
      description: Location Latitude in decimal degrees format.
      format: float
      minimum: -90
      maximum: 90
      example: 12.34
        
    longitude:
      title: longitude
      type: number
      description: Location Longitude in decimal degrees format.
      format: float
      minimum: -180
      maximum: 180
      example: 56.78
    
    #Location Including (Longitude, Latitude)
    location: 
      title: location
      type: object
      description: Object including both Longitude and Latitude.
      properties:
        latitude: {$ref: "#/components/schemas/latitude"}
        longitude: {$ref: "#/components/schemas/longitude"}
      example: (12.34, 56.78)
    
    phrase:
      title: phrase
      type: string
      description: Phrase that will be used for descripting/commenting the photo.
      minLength: 5
      maxLength: 1000
      default: ""
      pattern: ^.*$
      example: Hello Guys! I am here at University to do WASA Lecture!

    numberLikes:
      title: numberLikes
      type: integer
      description: Current # of photo's likes.
      default: 0
      example: 180
    
    numberComments:
      title: numberComments
      type: integer
      description: Current # of photo's comments.
      default: 0
      example: 7

    photo:
      title: photo
      type: object
      description: |-
        This object represent a single Photo that is going to be posted.
        It will contain multiple things: (1, Maria01Cooking,
        25f9f605-7cbb-4f02-9569-1d120e0580f7, Maria, 1, photoWASA.png, 
        2022-11-03T09:12:28Z, (12.34, 56.78), Hello Guys! I am here at 
        University to do WASA Lecture!)
      properties:
        photoid:
          $ref: "#/components/schemas/photoid"
        fileName:
          $ref: "#/components/schemas/fileName"
        uploadDate:
          $ref: "#/components/schemas/uploadDate"
        location: 
          $ref: "#/components/schemas/location"
        phrase: 
          $ref: "#/components/schemas/phrase"
        numberLikes:
          $ref: "#/components/schemas/numberLikes"
        numberComments:
          $ref: "#/components/schemas/numberComments"
      example: (1, photoWASA.png, 2022-11-03T09:12:28Z, (12.34, 56.78), 
                Hello Guys! I am here at University to do WASA Lecture!, 180, 7)
    
    ### SCHEMAS FOR ../COMMENTS #
    commentid:
      title: commentID
      type: integer
      description: ID of the Photo's comment to be/that is posted.
      readOnly: true
      example: 1

    comment:
      title: comment
      type: object
      description: |
        This is the entire Comment object. It will have the commentid, i.e. the 
        ID of the comment, the username of the commenter, i.e. the ID of the user that
        is currently commenting the photo, the actual comment in string, and the date
        and time of when the comment has been delivered.  
      properties: 
        commentid: 
          $ref: "#/components/schemas/commentid"
        commenterUsername: 
          $ref: "#/components/schemas/username"
        phrase:
          $ref: "#/components/schemas/phrase"
        uploadDate:
          $ref: "#/components/schemas/uploadDate"

      example: (1, Alessio_01, 'John, I will come to the WASA Lecture tomorrow. See you!', 2022-11-03T11:12:28Z)
    
    ### SCHEMAS FOR ../LIKES #
    like:
      title: like
      type: object
      description: |
        This is the entire Like object. It will have the likeid, i.e. the 
        ID of the like that coincides with the username of the liker, i.e. the user that
        is currently liking the photo, and the date and time of when the like has
        been delivered.  
      properties: 
        likeID: 
          $ref: "#/components/schemas/username"
        uploadDate:
          $ref: "#/components/schemas/uploadDate"

      example: (Alessio_01, 2022-11-03T04:12:28Z)
    
    ### SCHEMAS FOR ../BANS #    
    motivation:
      title: motivation
      type: string
      description: Ban Motivation.
      enum:
      - Spam
      - Bad Behaviour
      - Threats
      pattern: ^.*$
      default: Spam
      example: Spam
    

    ban:
      title: ban
      type: object
      description: |
        This is the entire Ban object. It will have the banID, i.e. the 
        ID of the ban that coincides with the Username of the Banned Person (since we can 
        ban each person once only), the date and time of when the ban has been delivered, 
        and the motivation of the Ban.  
      properties: 
        banid: 
          $ref: "#/components/schemas/username"
        uploadDate:
          $ref: "#/components/schemas/uploadDate"
        motivation:
          $ref: "#/components/schemas/motivation"
      example: (Marco_23, 2022-11-03T08:07:28Z, Spam)
    

    ### SCHEMAS FOR ../FOLLOW #
    follow:
      title: follow
      type: object
      description: |
        This is the entire Follow object. It will have the followid, i.e. the 
        ID of the follow, that coincides with the username of the person I want to follow.
        Moreover, I want to imdicate the date and time of when the follow action has
        been delivered.  
      properties: 
        followID: 
          $ref: "#/components/schemas/username"
        uploadDate:
          $ref: "#/components/schemas/uploadDate"

      example: (Giorgio_01, 2022-11-03T11:12:28Z)



  ##### PARAMETERS ##
  parameters:
    ### USER PARAMETERS#
    username:
      name: username
      in: path
      required: true
      description: Action requested by the following Username.
      schema:
        $ref: "#/components/schemas/username"
    
    fixedUsername:
      name: fixedUsername
      in: path
      required: true
      description: Action requested by the following fixedUsername.
      schema:
        $ref: "#/components/schemas/fixedUsername"
      
    uuid:
      name: uuid
      in: header
      required: true
      description: Action requested by the following Username (uuid).
      schema:
        $ref: '#/components/schemas/uuid'

    ### PHOTO PARAMETERS #
    photoid:
      name: photoid
      in: path
      required: true
      description: ID of the Photo to be/that is posted.
      schema:
        $ref: '#/components/schemas/photoid'
        
    ### LIKE PARAMETERS #
    usernameliker:
      name: usernameliker
      in: path
      required: true
      description: ID of the Liker that is going to put like to the post.
      schema:
        $ref: '#/components/schemas/username'
    
    ### BAN PARAMETERS #
    banid:
      name: banid
      in: path
      required: true
      description: BanID coinciding with the banned Username.
      schema:
        $ref: '#/components/schemas/username'
      

    ### PHOTO-FEAUTURES PARAMETERS #
    commentid:
      name: commentid
      in: path
      required: true
      description: ID of the Photo's Comment to be/that is posted.
      schema:
        $ref: '#/components/schemas/commentid'
        
    ### FOLLOWER-RELATED PARAMETERS #
    followerid:
      name: followerid
      in: path
      required: true
      description: FollowerID coinciding with the follower Username.
      schema:
        $ref: '#/components/schemas/username'
    

  ##### SECURITY SCHEMES ##
  securitySchemes:
    bearerAuthentication: 
      type: http
      scheme: bearer

  
  ##### RESPONSES ##
  responses:
    UnAuthorized:
      description: Forbidden! You do not have the necessary permissions!
    InternalServerError:
      description: The server encountered an Internal Error. Further info in server logs!
    NotFound:
      description: Not Found! No object requested has been Found!
    NoContent:
      description: No content! No requested object is present on WASAPhoto.


      
      

      








