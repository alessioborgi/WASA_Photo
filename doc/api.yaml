#Alessio Borgi's WASAPhoto Project
openapi: 3.0.3

info:
  title: WASAPhoto
  description: |-
    Keep in touch with your friends by sharing photos of special moments, thanks to
    WASAPhoto! Directly from your PC, you can upload your photos, and they will be
    visible to everyone who is following you.
  contact: 
    name: WASAPhoto APIs 
    url: https://github.com/alessioborgi/WASA_Project
    email: borgi.1952442@studenti.uniroma1.it
  version: "1.0.4"

servers:
 - url: http://localhost:3000

tags:
  - name: Login
    description: Methods related to the User Login.
    
  - name: User-Handling
    description: Methods related to the User Handling.
  
  - name: User-Profile
    description: Methods related to the User Profile.
  
  - name: Photo-Uploading
    description: Methods related to the Photo Uploading.
  
  - name: Photo-Comments
    description: Methods related to the Photo's Comments.
  
  - name: Photo-Likes
    description: Methods related to the Photo's Likes.
  
  - name: User-Bans
    description: Methods related to the User's Bans.
  
  - name: User-Following
    description: Methods related to the User's Following Profiles.
  
  - name: User-Followers
    description: Methods related to the User's Followers.
  
  - name: User-Stream
    description: Methods related to the User Homepage/Stream.
    

paths:

  /session: 
    summary: This is the Initial Login part.
    
    #Login Part
    post:
      operationId: doLogin
      tags: ["Login"]
      summary: New User Creation
      description: |
        HOW IT WORKS:
        Given in input the Username(in the Request Body), it will occur the actual user
        registration to the WASAPhoto Platform of the given Username. There can be 
        distinguished two cases though:
        - If the user does not exist, it will be created, and a "unique" user
          identifier is returned (uuid). 
        - If the user exists, the uuid is returned.
        
        RETURN:
        It will then return back in both the two cases above mentioned, the uuid 
        generated iff successful (it can be concepted as a sort of secret id, or token) that
        will be used for authentication in all others APIs.
        
        RESTRICTIONS:
        Note that this action is allowed ALWAYS, without any restriction and any need
        to pass for uuid parameter, since it is the place where it is actually created
        a new username(profile) or logged-in a present username. 
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/username"}
        required: true

      responses:
        '200':
          description: Ok! User LogIn Successful!
          content:
            application/json:
              schema: {$ref : "#/components/schemas/uuid"}

        '201':
          description: Created! New User Created Successfully!
          content:
            application/json:
              schema: {$ref : "#/components/schemas/uuid"}

        '400': {$ref : '#/components/responses/BadRequest'}
          
        '500': {$ref : '#/components/responses/InternalServerError'}
  
  ### PARTICULAR USER: #
  /users:
    summary: Users Collection

    get:
      security:
        - bearerAuthentication: []
      operationId: getUsers
      tags: ["User-Handling"]
      summary: WASAPhoto's List of Users.
      description: |
        HOW IT WORKS:
        Return the list of the Users registered to WASAPhoto.
        
        RETURN:
        The returned value is an array of Usernames. 
        
        RESTRICTIONS:
        Note that this action is allowed to EVERY USER that is logged in. Notice that we 
        require here for authentication because of the fact that you should be first 
        registered/logged-in in order to obtain the whole list of users. This list should
        be filtered by returning all the users that are registered in WASAPhoto that you
        are allowed to see (i.e., all except for the ones that have banned the user that is
        requesting this list).

      responses:
        '200':
          description: Ok! List of registered Users Returned Successfully!.
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 1000000
                description: Array of Usernames of the WASAPhoto's Users.
                items: 
                  $ref: "#/components/schemas/username"

        '204': {$ref : '#/components/responses/NoContent'}
        
        '403': {$ref : '#/components/responses/UnAuthorized'}
        
        '500': {$ref : '#/components/responses/InternalServerError'}

  /users/{username}:
    summary: Specific Username Profile of the User Collection.
    parameters: 
      #I need to provide for a Username of the person I am looking for.
      - $ref : "#/components/parameters/username"
    
    patch:
      security:
      - bearerAuthentication: []
      operationId: setMyUserName
      tags: ["User-Handling"]
      summary: Change your Username.
      description: |
        Change the (variable) Username with the new value passed in input (newUsername, in the body). 
        Also here, we request for authentication of the user that wants to perform this action.
        
        RETURN:
        Return nothing, or better, only HTTP Codes.
        
        RESTRICTIONS:
        Note that this action is allowed to NOT EVERY USER. Indeed, the change of Username 
        can be done by ONLY the user that is the Profile Owner. 
        Otherwise, it cannot. 

      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/username" }
        required: true

      responses: 
        '204': {description: OK! Username Updated Successfully!.}

        '400': {$ref : '#/components/responses/BadRequest'}
          
        '403': {$ref : '#/components/responses/UnAuthorized'}

        '500': {$ref : '#/components/responses/InternalServerError'}

    put:
      security:
        - bearerAuthentication: []
      operationId: setUser
      tags: ["User-Handling"]
      summary: Change your User.
      description: |
        HOW IT WORKS:
        Change the User with the new values passed in input (in the body). 
        Also here, we request for authentication of the user that wants to perform this action.
        
        RETURN:
        Return nothing, or better, only HTTP Codes.
        
        RESTRICTIONS:
        Note that this action is allowed to NOT EVERY USER. Indeed, this means that the 
        change of Username can be done by ONLY the user that is the Profile Owner. 
        Otherwise, it cannot. 
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/userProfile"}

      responses:
        '204': {description: OK! User Updated Successfully!.}
        
        '400': {$ref : '#/components/responses/BadRequest'}
          
        '403': {$ref : '#/components/responses/UnAuthorized'}

        '500': {$ref : '#/components/responses/InternalServerError'}
    
    delete:
      security:
        - bearerAuthentication: []
      operationId: deleteUser
      tags: ["User-Handling"]
      summary: Delete your Username.
      description: |
        HOW IT WORKS:
        Remove the User profile, given in input the username. Also here, we request for 
        authentication of the user that wants to perform this action. 
        Note that the removal of a User implies the removal of also its photos with their 
        related comments and photos, the bans where it is involved, the follow objects where 
        it is involved.  

        RETURN:
        Return nothing, or better, only HTTP Codes.
        
        RESTRICTIONS:
        Note that this action is allowed to NOT EVERY USER. Indeed, this means that the 
        deletion of the user(account) can be done by ONLY if the user that is deleting the
        account is the actual ORIGINAL ACCOUNT OWNER. Otherwise, it cannot. 
        
      responses:
        '204': {description: OK! User Profile deleted successfully!}

        '400': {$ref : '#/components/responses/BadRequest'}
        
        '403': {$ref : '#/components/responses/UnAuthorized'}

        '500': {$ref : '#/components/responses/InternalServerError'}
    
    get:
      security:
        - bearerAuthentication: []
      operationId: getUserProfile
      tags: ["User-Profile"]
      summary: Return the User Profile.
      description: |
        HOW IT WORKS:
        Return the current User Profile given in input (as Parameter in the path) the Username. Also here, we request for 
        authentication of the user that wants to perform this action. 
        
        RETURN:
        The returned value is the requested User's profile object. 
        
        RESTRICTIONS:
        Note that this action is allowed NOT to EVERY USER. Indeed, you can retrieve the user
        profile iff this has not banned you.
      
      responses:
        '200':
          description: Ok! User Profile Returned Successfully!.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/userProfile"}
              
        '400': {$ref : '#/components/responses/BadRequest'}
        
        '403': {$ref : '#/components/responses/UnAuthorized'}
        
        '500': {$ref : '#/components/responses/InternalServerError'}

    
  ### REMARK #

  #Notice that I decided to implement the project going also through subfolders. Notice that
  #I could have opted for a 'better' version, suggested by Microsoft's Best Practices, for
  #which we have that a long path should be splitted into smaller parts in order to be
  #easier to mantain and more flexible. This is the resource:
  #(https://learn.microsoft.com/en-us/azure/architecture/.#best-practicesapi-design
  
  #However, I have decided to go for the more straightforward way. 

  ### USER's PHOTO COLLECTION #
  /users/{username}/photos:
    summary: User's Photos Collection.
    parameters: 
      #I need to provide for a username.
      - $ref : "#/components/parameters/username"

    #Adding a new Photo.
    post:
      security:
        - bearerAuthentication: []
      operationId: uploadPhoto
      tags: ["Photo-Uploading"]
      summary: Posting a new Photo.
      description: |
        HOW IT WORKS:
        Given in input the Username of the person I want to add the photo, post a new photo on
        this profile. Also here, we request for authentication of the user that wants to perform
        this action. 
        Note that this action correspond as making a post on Instagram. However, I opted for the
        nomenclature photos, in such a way of avoiding to confuse the Post on instagram with the
        post HTTP method.
        
        RETURN:
        Return nothing, or better, only HTTP Codes.
        
        RESTRICTIONS:
        Note that this action is allowed to ONLY the USERS that are both the Maker of the
        Post on the profile and the owner of the User Profile. Thus, we can only post photos on
        our own profiles.
      
      requestBody:
        content:
          multipart/form-data:
            schema: {$ref: "#/components/schemas/photoInput"}

      responses:

        '201':
          description: Created! Photo Created Successfully!
          content:
            application/json:
              schema: {$ref : "#/components/schemas/photoid"}

        '400': {$ref : '#/components/responses/BadRequest'}
        
        '403': {$ref : '#/components/responses/UnAuthorized'}

        '500': {$ref : '#/components/responses/InternalServerError'}
    
    #Getting my set of photos publicated
    get:
      security:
        - bearerAuthentication: []
      operationId: getPhotos
      tags: ["Photo-Uploading"]
      summary: Get the Photos that has been publicated only by a specific Username.
      description: |
        HOW IT WORKS:
        Return the list of the photos objects of the profile. The list should be sorted
        w.r.t. the reverse chronological order. Also here, we request for authentication 
        of the user that wants to perform this action. 
        
        RETURN:
        The returned value is an array of photo objects.
        
        RESTRICTIONS:
        Note that this action is allowed to EVERY USER, EXCEPT for the BANNED ONES. This 
        means that the revision of photos action can be done by any user(thus both on 
        its photos and on other photos), except for the case where the user that wants 
        to revise photos, has been banned by the owner of the photo.
      responses:
        '200':
          description: List of Photos Returned.
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 100000
                description: Array of Photo Returned.
                items: { $ref: "#/components/schemas/photo" }
        
        '204': {$ref : '#/components/responses/NoContent'}

        '400': {$ref : '#/components/responses/BadRequest'}
        
        '403': {$ref : '#/components/responses/UnAuthorized'}

        '500': {$ref : '#/components/responses/InternalServerError'}
    
  #Particular Photo
  /users/{username}/photos/{photoid}:
    summary: Specific User Profile's photo.
    parameters:
    - $ref: "#/components/parameters/username"
    - $ref: "#/components/parameters/photoid"

    #Deleting one particular photo that I got publicated.
    delete:
      security:
        - bearerAuthentication: []
      operationId: deletePhoto
      tags: ["Photo-Uploading"]
      summary: Remove your (existing) photo.
      description: |
        HOW IT WORKS:
        Remove a photo from the account given the username of the photo owner, and the photo id. 
        Note that the removal of an image will also remove likes and comments related to it.
        
        RETURN:
        Return nothing, or better, only HTTP Codes.
        
        RESTRICTIONS:
        Note that this action is allowed to NOT EVERY USER. Indeed, this means that the 
        deletion of the photo can be done by ONLY if the user that is deleting the photo
        is the actual ORIGINAL PHOTO ADDER. Otherwise, it cannot. Thus, only the user that
        has actually posted the photo can delete it. 
      responses:
        '204': {description: OK! Photo deleted successfully!}
        
        '400': {$ref : '#/components/responses/BadRequest'}

        '403': {$ref : '#/components/responses/UnAuthorized'}

        '500': {$ref : '#/components/responses/InternalServerError'}

    get:
      security:
        - bearerAuthentication: []
      operationId: getPhoto
      tags: ["Photo-Uploading"]
      summary: Return the User Photo Object.
      description: |
        HOW IT WORKS:
        Return the current User Photo Object given in input the Username and the photo id. Also here, 
        we request for authentication of the user that wants to perform this action. 
        
        RETURN:
        The returned value is the requested User's Photo object. 
        
        RESTRICTIONS:
        Note that this action is allowed NOT to EVERY USER. Indeed, you can retrieve the user's photo
        iff this has not banned you.
      responses:
        '200':
          description: Ok! User's Photo Returned Successfully!.
          content:
            application/json:
              schema: {$ref: "#/components/schemas/photo"}

        '204': {$ref : '#/components/responses/NoContent'}

        '400': {$ref : '#/components/responses/BadRequest'}
        
        '403': {$ref : '#/components/responses/UnAuthorized'}
        
        '500': {$ref : '#/components/responses/InternalServerError'}


  ### USER's PHOTO COMMENTS COLLECTION #

  #Comments Set.
  /users/{username}/photos/{photoid}/comments:
    summary: Photo's Comments Collection.
    parameters: 
      #I need to provide for a Photo's Owner and a Photo's photoid.
      - $ref : "#/components/parameters/username"
      - $ref : "#/components/parameters/photoid"

    #Adding a new Comment.
    post:
      security:
        - bearerAuthentication: []
      operationId: commentPhoto
      tags: ["Photo-Comments"]
      summary: Posting a new Photo's Comment.
      description: |-
        HOW IT WORKS:
        Given in input the Username owner of the photo on which we want to add the 
        comment and the Photo's photoid, to indicate on which photo to add the comment, 
        it will post a new photo's comment. 
        
        RETURN:
        Return nothing, or better, only HTTP Codes.
        
        RESTRICTIONS:
        Note that this action is allowed to EVERY USER, EXCEPT for the BANNED ONES. This 
        means that the comment action can be done by any user(thus both on its photos 
        and on other photos), except for the case where the user that wants to comment,
        has been banned by the owner of the photo.
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/phrase"}

      responses:

        '201':
          description: Created! Photo's Comment Created Successfully!
          content:
            application/json:
              schema: {$ref : "#/components/schemas/commentid"}

        '400': {$ref : '#/components/responses/BadRequest'}
        
        '403': {$ref : '#/components/responses/UnAuthorized'}

        '500': {$ref : '#/components/responses/InternalServerError'}
    
    #Getting Photo's Comment.
    get:
      security:
        - bearerAuthentication: []
      operationId: getPhotoComments
      tags: ["Photo-Comments"]
      summary: Get the Photos's Comments.
      description: |-
        HOW IT WORKS:
        Return the list of the Photo's Comments on reverse chronological order. Also here, 
        we request for authentication of the user that wants to perform this action. 
        
        RETURN: 
        The returned value is an array of Comment Objects. 
        
        RESTRICTIONS:
        Note that this action is allowed to EVERY USER, EXCEPT for the BANNED ONES. This 
        means that the retrieval of photo's comments can be done by any user(thus both 
        on its photos and on other photos), except for the case where the user that
        wants to retrieve the photo's comments has been banned by the owner of the photo.
        (Indeed, in this case, it should not be able to neither see its profile!)
      responses:
        '200':
          description: Ok! List of Photos' Comments Returned.
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 100000
                description: Array of Photo's Comment.
                items: { $ref: "#/components/schemas/comment" }
        
        '204': {$ref : '#/components/responses/NoContent'}

        '400': {$ref : '#/components/responses/BadRequest'}
        
        '403': {$ref : '#/components/responses/UnAuthorized'}
        
        '500': {$ref : '#/components/responses/InternalServerError'}
  
  
  #PARTICULAR COMMENT:
  /users/{username}/photos/{photoid}/comments/{commentid}:
    summary: Specific Photo's Comment.
    parameters:
    - $ref: "#/components/parameters/username"
    - $ref: "#/components/parameters/photoid"
    - $ref: "#/components/parameters/commentid"

    #Deleting one particular photo's comment that I got publicated.
    delete:
      security:
        - bearerAuthentication: []
      operationId: uncommentPhoto
      tags: ["Photo-Comments"]
      summary: Remove a Photo's comment.
      description: |
        HOW IT WORKS:
        Remove a photo's comment given a specific username that is the owner of the photo to
        which the comment has been added, given the photoid that indicates the photo on which
        the comment has been added, and given a specific commentid. 
        
        RETURN:
        Return nothing, or better, only HTTP Codes.
        
        RESTRICTIONS:
        Note that this action is allowed to NOT EVERY USER. Indeed, this means that the 
        deletion of the comment can be done ONLY if the user that is deleting the comment
        is the actual ORIGINAL COMMENTER. Otherwise, it cannot.
      responses:
        '204': {description: OK! Photo's Comment deleted successfully!}

        '400': {$ref : '#/components/responses/BadRequest'}

        '403': {$ref : '#/components/responses/UnAuthorized'}

        '500': {$ref : '#/components/responses/InternalServerError'}

  ### PHOTO LIKES #

  #Likes Set.
  /users/{username}/photos/{photoid}/likes:
    summary: Photo's Likes Collection.
    parameters: 
      #I need to provide for a Photo's owner fixedUsername, a photo's photoid.
      - $ref : "#/components/parameters/username"
      - $ref : "#/components/parameters/photoid"

    #Getting Photo's Likes.
    get:
      security:
        - bearerAuthentication: []
      operationId: getPhotoLikes
      tags: ["Photo-Likes"]
      summary: Get the Photos's Likes.
      description: |-
        HOW IT WORKS:
        Given in input the Username of the person which owns the photo and the Photo's
        photoid, it will return the list of the Photos'Likes.  
        Also here, we request for authentication of the user that wants to perform this action. 
        
        RETURN:
        The returned value is an array of Usernames of people has added the Like. 
        
        RESTRICTIONS:
        Note that this action is allowed to EVERY USER, EXCEPT for the BANNED ONES. This 
        means that the retrieval of photo's likes can be done by any user(thus both 
        on its photos and on other photos), except for the case where the user that
        wants to retrieve the photo's likes has been banned by the owner of the photo.
        (Indeed, in this case, it shoudl not be able to neither see its profile!)
      responses:
        '200':
          description: Ok! List of Photos' Likes Returned.
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 100000
                description: Array of Photo's Like.
                items: { $ref: "#/components/schemas/username" }
        
        '204': {$ref : '#/components/responses/NoContent'}

        '400': {$ref : '#/components/responses/BadRequest'}

        '403': {$ref : '#/components/responses/UnAuthorized'}
        
        '500': {$ref : '#/components/responses/InternalServerError'}
  
  
  #PARTICULAR LIKE:
  /users/{username}/photos/{photoid}/likes/{usernameLiker}:
    summary: Photo's Particular Like.
    parameters: 
      #I need to provide for a Photo's owner username, a Liker's username and a photo's photoid.
      - $ref : "#/components/parameters/username"
      - $ref : "#/components/parameters/photoid"
      - $ref : "#/components/parameters/usernameLiker"

    #Adding a new Like.
    put:
      security:
        - bearerAuthentication: []
      operationId: likePhoto
      tags: ["Photo-Likes"]
      summary: Posting a new Photo's Like.
      description: |-
        HOW IT WORKS:
        Given in input the Liker's username, the Photo's photoid, it will post a new
        photo's like to the photo of the username passed in input. 
        Notice that, given the fact that we can add only one like per person at each photo, 
        we directly add it with the put and not with the post. The specific likeid (that
        I decided to call usernameLiker), then will simply coincide with the username of 
        the username that has added the like to the photo. 
        Also here, we request for authentication of the user that wants to perform this action. 
        
        RETURN:
        Return nothing, or better, only HTTP Codes.
        
        RESTRICTIONS:
        Note that this action is allowed to EVERY USER, EXCEPT for the BANNED ONES and 
        the PHOTO OWNER (since there is no sense of putting a self-like on a photo). 
        This means that the like action can be done by any user except for the case where  
        the user that wants to put a like, has been banned by the owner of the photo, and 
        when the liker is the owner of the photo. 
        
      responses:
        '204': {description: OK! Photo's Like inserted successfully.}

        '400': {$ref : '#/components/responses/BadRequest'}

        '403': {$ref : '#/components/responses/UnAuthorized'}

        '500': {$ref : '#/components/responses/InternalServerError'}
    
    
    #Deleting one particular photo's like that I have put.
    delete:
      security:
        - bearerAuthentication: []
      operationId: unlikePhoto
      tags: ["Photo-Likes"]
      summary: Remove a Photo's Like.
      description: |
        HOW IT WORKS:
        Given in input the username of the photo owner that we want to unlike, the Liker's 
        username and the Photo's photoid, it will remove a like from this photo. 
        Notice that, given the fact that we can add only one like per person at each photo, 
        we directly recognize as the Liker by the likeID(usernameLiker). 
        
        RETURN:
        Return nothing, or better, only HTTP Codes.
        
        RESTRICTIONS:
        Note that this action is allowed to NOT EVERY USER. Indeed, this means that the 
        deletion of the like can be done by ONLY if the user that is deleting the like
        is the actual original liker. Otherwise, it cannot.

      responses:
        '204': {description: OK! Photo's Like deleted successfully!}

        '400': {$ref : '#/components/responses/BadRequest'}

        '403': {$ref : '#/components/responses/UnAuthorized'}

        '500': {$ref : '#/components/responses/InternalServerError'}

  
  ### USER's BANS COLLECTION: #

  #Bans Set:
  /users/{username}/bans:
    summary: Username's Banned Users Collection.
    parameters: 
      #I need to provide for a fixedUsername.
      - $ref : "#/components/parameters/username"

    #Getting the set of Banned Users.
    get:
      security:
        - bearerAuthentication: []
      operationId: getBannedUsers
      tags: ["User-Bans"]
      summary: Get Bans for the given user.
      description: |
        HOW IT WORKS:
        Return the list of the Bans given the username of the person we want to know the
        list of banned user. 
        Also here, we request for authentication of the user that wants to perform this action. 
        
        RETURN:
        The returned value is an array of usernames.
        
        RESTRICTIONS:
        Note that this action is allowed to ONLY the USER OWNER of the PROFILE. This 
        means that the revision of banned users, can be done by only the owner of the 
        profile.
      responses:
        '200':
          description: List of Banned Users.
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 100000
                description: Array of User's Bans.
                items: { $ref: "#/components/schemas/username" }
        
        '204': {$ref : '#/components/responses/NoContent'}

        '400': {$ref : '#/components/responses/BadRequest'}
        
        '403': {$ref : '#/components/responses/UnAuthorized'}
        
        '500': {$ref : '#/components/responses/InternalServerError'}
    
  #PARTICULAR BAN: 
  /users/{username}/bans/{usernameBanned}:
    summary: Specific User's Ban.
    parameters:
    - $ref: "#/components/parameters/username"
    - $ref: "#/components/parameters/usernameBanned"

    #Adding a new Ban.
    put:
      security:
        - bearerAuthentication: []
      operationId: banUser
      tags: ["User-Bans"]
      summary: Banning a User.
      description: |
        HOW IT WORKS:
        Given in input the Banner username, and a usernname of the person I want ot ban, ban
        it. 
        Also here, we request for authentication of the user that wants to perform this action. 
        
        RETURN:
        Return nothing, or better, only HTTP Codes.
        
        RESTRICTIONS:
        Note that this action is allowed to ONLY the USERS that are both the Creators of the
        Ban and the Owner of the User Profile. Thus, we can only Ban people if we are the 
        account owners. 

      responses:

        '204': {$ref : '#/components/responses/NoContent'}

        '400': {$ref : '#/components/responses/BadRequest'}
        
        '403': {$ref : '#/components/responses/UnAuthorized'}

        '500': {$ref : '#/components/responses/InternalServerError'}
        
    #Deleting one particular ban that I added.
    delete:
      security:
        - bearerAuthentication: []
      operationId: unbanUser
      tags: ["User-Bans"]
      summary: Remove a User Ban.
      description: |
        HOW IT WORKS:
        Remove a ban from the account given the username of the account, and the username
        (usernameBanner) of the person I want to unban.  
        Also here, we request for authentication of the user that wants to perform this action. 
        
        RETURN:
        Return nothing, or better, only HTTP Codes.
        
        RESTRICTIONS:
        Note that this action is allowed to NOT EVERY USER. Indeed, this means that the 
        deletion of the ban can be done ONLY if the user that is deleting the ban
        is the actual ORIGINAL BAN ADDER(i.e., also the profile owner). Otherwise, it cannot. Thus, only the user that
        has actually banned a user, can also delete the ban, whenever it wants. 
      responses:
        '204': {$ref : '#/components/responses/NoContent'}

        '400': {$ref : '#/components/responses/BadRequest'}

        '403': {$ref : '#/components/responses/UnAuthorized'}

        '500': {$ref : '#/components/responses/InternalServerError'}


  ### USER's FOLLOWERS COLLECTION #

  #Followers set: (Set of people that are following this account)
  /users/{username}/followers:
    summary: Username's Followers Collection (people who are following me).
    parameters: 
      #I need to provide for a username for the person I want to know the followers.
      - $ref : "#/components/parameters/username"

    #Getting the set of Followers.
    get:
      security:
        - bearerAuthentication: []
      operationId: getFollowers
      tags: ["User-Followers"]
      summary: Get the Followers.
      description: |
        HOW IT WORKS:
        Return the list of the Followers of a given username.
        
        RETURN:
        The returned value is an array of usernames objects.
        
        RESTRICTIONS:
        Note that this action is allowed not to EVERY USER. Indeed, we can all see the 
        followers of anyone, provided that we are not banned by them.
      responses:
        '200':
          description: List of Followers Object.
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 100000
                description: Array of Followers.
                items: { $ref: "#/components/schemas/username" }
        
        '204': {$ref : '#/components/responses/NoContent'}

        '400': {$ref : '#/components/responses/BadRequest'}
        
        '403': {$ref : '#/components/responses/UnAuthorized'}
        
        '500': {$ref : '#/components/responses/InternalServerError'}


  /users/{username}/followings:
    summary: Username's Followings Collection (people I am following).
    parameters: 
      #I need to provide for a username of the account owner.
      - $ref : "#/components/parameters/username"

    #Getting the set of Followed People.
    get:
      security:
        - bearerAuthentication: []
      operationId: getFollowings
      tags: ["User-Following"]
      summary: Get the Following.
      description: |
        HOW IT WORKS:
        Return the list of the Following Users, given a username of the person I want to 
        know the Following Users. 
        Also here, we request for authentication of the user that wants to perform this action. 
        
        RETURN:
        The returned value is an array of usernames.
        
        RESTRICTIONS:
        Note that this action is allowed not to EVERY USER. Indeed, we can all see the 
        following Users of anyone, provided that we are not banned by them.
      responses:
        '200':
          description: List of Following Object.
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 100000
                description: Array of Followings.
                items: { $ref: "#/components/schemas/username" }
        
        '204': {$ref : '#/components/responses/NoContent'}
        
        '400': {$ref : '#/components/responses/BadRequest'}

        '403': {$ref : '#/components/responses/UnAuthorized'}
        
        '500': {$ref : '#/components/responses/InternalServerError'}
    

    
  /users/{username}/followings/{usernameFollowing}:
    summary: Specific User's Ban.
    #I need to provide for the username, and followID(username).
    parameters:
    - $ref: "#/components/parameters/username"
    - $ref: "#/components/parameters/usernameFollowing"
    
    #Adding a new Follow.
    put:
      security:
        - bearerAuthentication: []
      operationId: followUser
      tags: ["User-Following"]
      summary: Follow a User.
      description: |
        HOW IT WORKS:
        Given in input the fixedUsername that is the account owner, and the follow object passed
        in the request body, add this last one on the collection of following users.
        Also here, we request for authentication of the user that wants to perform this action. 
        
        
        RETURN:
        Return nothing, or better, only HTTP Codes.
        
        RESTRICTIONS:
        Note that this action is allowed to ONLY users that are of course authenticated.
        Note that username and usernameFollowing should be diverse. 
       

      responses:

        '204': {$ref : '#/components/responses/NoContent'}

        '400': {$ref : '#/components/responses/BadRequest'}
        
        '403': {$ref : '#/components/responses/UnAuthorized'}

        '500': {$ref : '#/components/responses/InternalServerError'}

    #Deleting one particular follow that I have added.
    delete:
      security:
        - bearerAuthentication: []
      operationId: unfollowUser
      tags: ["User-Following"]
      summary: Remove a User Follow.
      description: |
        HOW IT WORKS:
        Remove a follow from the account username given the usernameFollowing(i.e. the username of
        the person that I was following). 
        
        RETURN:
        Return nothing, or better, only HTTP Codes.
        
        RESTRICTIONS:
        Note that this action is allowed to NOT EVERY USER. Indeed, this means that the 
        deletion of the follow can be done ONLY if the user that is deleting the follow
        is the actual ORIGINAL FOLLOW ADDER. Otherwise, it cannot. Thus, only the user that
        has actually followed a user, can also delete it, whenever it wants. This means that 
        the user that performs this action should be on its own profile.

      responses:
        '204': {$ref : '#/components/responses/NoContent'}

        '400': {$ref : '#/components/responses/BadRequest'}
          
        '403': {$ref : '#/components/responses/UnAuthorized'}

        '500': {$ref : '#/components/responses/InternalServerError'}


  /users/{username}/myStream:
    summary: Username's Stream (initial home of Instagram where there are last posts).
    parameters: 
      #I need to provide for a username of the person for which I want to know the stream.
      - $ref : '#/components/parameters/username'

    #Getting the stream of an account.
    get:
      security:
        - bearerAuthentication: []
      operationId: getMyStream
      tags: ["User-Stream"]
      summary: Get the Stream.
      description: |
        HOW IT WORKS:
        Return the list of the last posts belonging to the following people, given in input
        the username of the person I want to know this information. The list returned is in
        reverse chronological order, of course. 
        Also here, we request for authentication of the user that wants to perform this action. 
        
        RETURN:
        The returned value is an array of Photo objects.
        
        RESTRICTIONS:
        Note that this action is allowed NOT to EVERY USER. Indeed, this is only allowed to
        the owner of the profile, meaning that, only if username who is requesting this action 
        is the profile owner.
      responses:
        '200':
          description: List of Photo Object of people I am following.
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 100000
                description: Array of Stream Photos.
                items: { $ref: "#/components/schemas/photo" }
        
        '204': {$ref : '#/components/responses/NoContent'}

        '400': {$ref : '#/components/responses/BadRequest'}
        
        '403': {$ref : '#/components/responses/UnAuthorized'}
        
        '500': {$ref : '#/components/responses/InternalServerError'}







################################### COMPONENTS ###################################








components:

  ##### SCHEMAS ##
  schemas:

    ### SCHEMAS FOR /USER #
    fixedUsername:
      title: fixedUsername
      type: string
      description:  |-
        The fixedUsername is a STATIC and PUBLICLY-AVAILABLE username, that will however 
        remain constants during the whole course of the user creation. It CANNOT BE CHANGED
        and I use it since it helps me to change the username of the user 
        (username) still pointing to this particular user.
        I use as pattern a Regex of simply any alpha-numeric (both capital and not).
        
      pattern: ^[u0-9]{2,31}$
      minLength: 2
      maxLength: 31
      example: u1

    
    uuid:
      title: uuid
      type: string
      description:  |-
        The uuid is a Unique user Identifier that will be passed as Token in the Bearer Authentication. 
        It has 36 chars: 8 - 4 - 4 - 4 - 12
        
      pattern: ^[0-9a-fA-F-]{36}
      minLength: 36
      maxLength: 36
      example: 00000000-0000-0000-0000-000000000000
      
      
    username: 
      title: username
      type: string
      description: |-
        The Username is the DYNAMIC and PUBLICLY-AVAILABLE username, that can be reset by the 
        user.
      minLength: 3
      maxLength: 31
      pattern: ^(?=[a-zA-Z0-9._]{3,31}$)(?!.*[_.]{2})[^_.].*[^_.]$
      example: Maria
    
    biography:
      title: biography
      type: string
      description: Phrase that the User should use to describe itself (only if he/she wants).
      minLength: 0
      maxLength: 1000
      pattern: ^.*$
      example: Hello! I am Alessio Borgi, a third-year ACSAI Student...
      
    name:
      title: name
      type: string
      description: It is the User actual name.
      minLength: 2
      maxLength: 31
      pattern: ^.*$
      example: Alessio
    
    surname:
      title: surname
      type: string
      description: It is the User actual surname.
      minLength: 2
      maxLength: 31
      pattern: ^.*$
      example: Borgi
    
    dateOfBirth:
      title: dateOfBirth
      type: string
      description: Actual Date when the user was born.
      format: date
      minLength: 10
      maxLength: 10
      default: 0000-01-01
      example: 2001-04-17

    email:
      title: email
      type: string
      description:  It is the User Email.
      format: email
      minLength: 3
      maxLength: 100
      default: "surname.matriculationNumber@studenti.uniroma1.it"
      example: borgi.1952442@studenti.uniroma1.it
    
    nationality:
      title: nationality
      type: string
      description:  It is the User Nationality.
      minLength: 3
      maxLength: 100
      default: "Not Inserted"
      pattern: ^.*$
      example: Italian
    
    gender:
      title: gender
      type: string
      description: User Gender.
      minLength: 4
      maxLength: 14
      enum:
      - male
      - female 
      - do not specify
      default: "do not specify"
      pattern: ^.*$
      example: male

    dateOfCreation:
      title: dateOfCreation
      type: string
      description: Actual Date Profile Creation.
      format: date-time
      minLength: 20
      maxLength: 20
      default: 0000-01-01T00:00:00Z
      example: 2022-11-03T08:30:00Z
          
    numberPhotos:
      title: numberPhotos
      type: integer
      description: Current number of Photos(Posts).
      default: 0
      example: 120
    
    numberFollowers:
      title: numberFollowers
      type: integer
      description: Current number of Followers.
      default: 0
      example: 360

    numberFollowing:
      title: numberFollowing
      type: integer
      description: Current number of Following.
      default: 0
      example: 210

    #User Profile 
    userProfile:
      title: user
      type: object
      description: |
        This is the entire User object. I have built the project on the fact that we can
        have also the possibility to have also more username per person (e.g. as 
        Instagram). It is therefore allowed that one person have more than one username
        and therefore more profiles. It would only need to re-insert all the personalInfo
        (if he/she wants). 
        Thus, I treat every username as a new profile, indistinctly to whom belongs to.  
      properties: 
        fixedUsername:
          $ref: "#/components/schemas/fixedUsername"
        username: 
          $ref: "#/components/schemas/username"
        biography:
          $ref: "#/components/schemas/biography"
        dateOfCreation:
          $ref: "#/components/schemas/dateOfCreation"
        numberPhotos:
          $ref: "#/components/schemas/numberPhotos"
        numberFollowers:
          $ref: "#/components/schemas/numberFollowers"
        numberFollowing:
          $ref: "#/components/schemas/numberFollowing"  
        name:
          $ref: "#/components/schemas/name"
        surname:
          $ref: "#/components/schemas/surname"
        dateOfBirth:
          $ref: "#/components/schemas/dateOfBirth"
        email:
          $ref: "#/components/schemas/email"
        nationality:
          $ref: '#/components/schemas/nationality'
        gender:
          $ref: "#/components/schemas/gender"
        


    ### SCHEMAS FOR ../PHOTO #
    #Whole Photo Object   
    photoid:
      title: photoid
      type: integer
      description: ID of the Photo to be/that is posted.
      readOnly: true
      example: 1
    
    fileName:
      title: filename
      type: string
      description: |-
        Actual Photo to be uploaded. 
      format: binary
      minLength: 73 
      maxLength: 2147483647
      example: "000111100111111110000000000011111111111000111100111111110000000000011111111111000111100111111110000000000011111111111000111100111111110000000000011111111111000111100111111110000000000011111111111000111100111111110000000000011111111111000111100111111110000000000011111111111000111100111111110000000000011111111111000111100111111110000000000011111111111"
    
    fileNamePath:
      title: filename
      type: string
      description: Actual Photo path saved in the "./photos" folder locally. 
      minLength: 5 
      maxLength: 100
      pattern: ^.*$
      example: "./service/api/photos/u1-photo-1.jpeg"
    
    uploadDate:
      title: uploadDate
      type: string
      description: |-
        Actual Date and Time of the moment when the photo is uploaded/commented/liked.
      minLength: 20
      maxLength: 20
      format: date-time
      default: 0000-01-01T00:00:00Z
      example: 2022-11-03T08:30:00Z

    phrase:
      title: phrase
      type: string
      description: Phrase that will be used for descripting/commenting the photo.
      minLength: 5
      maxLength: 1000
      pattern: ^.*$
      example: Hello Guys! I am here at University to do WASA Lecture!

    numberLikes:
      title: numberLikes
      type: integer
      description: Current # of photo's likes.
      default: 0
      example: 180
    
    numberComments:
      title: numberComments
      type: integer
      description: Current # of photo's comments.
      default: 0
      example: 7

    photo:
      title: photo
      type: object
      description: |-
        This object represent a single Photo that is going to be posted.
        It will contain multiple things: (1, Maria01Cooking,
        25f9f605-7cbb-4f02-9569-1d120e0580f7, Maria, 1, photoWASA.png, 
        2022-11-03T09:12:28Z, (12.34, 56.78), Hello Guys! I am here at 
        University to do WASA Lecture!)
      properties:
        photoid:
          $ref: "#/components/schemas/photoid"
        fileNamePath:
          $ref: "#/components/schemas/fileNamePath"
        uploadDate:
          $ref: "#/components/schemas/uploadDate"
        phrase: 
          $ref: "#/components/schemas/phrase"
        numberLikes:
          $ref: "#/components/schemas/numberLikes"
        numberComments:
          $ref: "#/components/schemas/numberComments"
    
    photoInput:
      title: photoInput
      type: object
      description: |-
        This object represents the input that the User insert when it has to upload 
        a photo (photo, phrase).
      properties:
        fileName:
          $ref: "#/components/schemas/fileName"
        phrase:
          $ref: "#/components/schemas/phrase"
        

    ### SCHEMAS FOR ../COMMENTS #
    commentid:
      title: commentID
      type: integer
      description: ID of the Photo's comment to be/that is posted.
      readOnly: true
      example: 1

    comment:
      title: comment
      type: object
      description: |
        This is the entire Comment object. It will have the commentid, i.e. the 
        ID of the comment, the username of the commenter, i.e. the ID of the user that
        is currently commenting the photo, the actual comment in string, and the date
        and time of when the comment has been delivered.  
      properties: 
        commentid: 
          $ref: "#/components/schemas/commentid"
        photoid:
          $ref: "#/components/schemas/photoid"
        fixedUsername: 
          $ref: "#/components/schemas/fixedUsername"
        commenterFixedUsername: 
          $ref: "#/components/schemas/fixedUsername"
        phrase:
          $ref: "#/components/schemas/phrase"
        uploadDate:
          $ref: "#/components/schemas/uploadDate"
    
  
  ##### PARAMETERS ##
  parameters:
    ### USER PARAMETERS#
    username:
      name: username
      in: path
      required: true
      description: |
        (Username)Action requested on the following username.
      schema: {$ref: "#/components/schemas/username"}
    
    ### PHOTO PARAMETERS #
    photoid:
      name: photoid
      in: path
      required: true
      description: ID of the Photo to be/that is posted.
      schema: {$ref: '#/components/schemas/photoid'}
        
    ### LIKE PARAMETERS #
    usernameLiker:
      name: usernameLiker
      in: path
      required: true
      description: Like Action requested by the following username.
      schema: {$ref: "#/components/schemas/username"}
      
    ### BAN PARAMETERS #
    usernameBanned:
      name: usernameBanned
      in: path
      required: true
      description: usernameBanned coinciding with the banned username.
      schema: {$ref: '#/components/schemas/username'}
      

    ### PHOTO-FEAUTURES PARAMETERS #
    commentid:
      name: commentid
      in: path
      required: true
      description: ID of the Photo's Comment to be/that is posted.
      schema: {$ref: '#/components/schemas/commentid'}
        
    ### FOLLOWER-RELATED PARAMETERS #
    usernameFollowing:
      name: usernameFollowing
      in: path
      required: true
      description: usernameFollowing coinciding with the following Username.
      schema: {$ref: '#/components/schemas/username'}
    

  ##### SECURITY SCHEMES ##
  #Regex for the uuid: '^[0-9a-fA-F\-]{36}'
  securitySchemes:
    bearerAuthentication: 
      type: http
      scheme: bearer

  
  ##### RESPONSES ##
  responses:
    UnAuthorized:
      description: |
        403(Forbidden!) You do not have the necessary permissions!
    InternalServerError:
      description: |
        500(The server encountered an Internal Error. Further info in server logs!)
    
    NoContent:
      description: |
        No content! No requested object is present on WASAPhoto.

    BadRequest:
      description: |
       Bad Request! Not Valid action requested..


      
      

      








